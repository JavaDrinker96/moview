server:
  port: 8080

spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.yml

  datasource:
    url: jdbc:postgresql://localhost:5432/moview
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 332163067778-fsr781lnhvakl27nvgupou5ckhl84oii.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

app:
  auth:
    token:
      secret: 926D96C90030DD58429D2751AC1BDBBC
      access-expiration-ms: 3600000
      refresh-expiration-ms: 2592000000
  cors:
    allowedOrigins: >
      http://localhost:3000,
      http://localhost:8080

  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorized-redirect-uris: >
      http://localhost:3000/oauth2/redirect